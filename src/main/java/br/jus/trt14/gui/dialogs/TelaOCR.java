package br.jus.trt14.gui.dialogs;

import br.jus.trt14.constant.Constant;
import br.jus.trt14.tools.Utils;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.CMYKColor;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.lang.management.ManagementFactory;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import net.htmlparser.jericho.Source;
import net.htmlparser.jericho.StartTag;
import net.sourceforge.tess4j.Tesseract;
import org.ghost4j.Ghostscript;

/**
 *
 * @author  <>
 */
class Worker implements Runnable {

    private final String imagemAtualOCR;
    private final String imagemAtualPDF;
    private final TelaOCR c;

    public Worker(String imagemAtualOCR, String imagemAtualPDF, TelaOCR c) {
        this.imagemAtualOCR = imagemAtualOCR;
        this.imagemAtualPDF = imagemAtualPDF;
        this.c = c;
    }

    @Override
    public void run() {
        try {
            //TelaOCR.doHOCRCreation(imagemAtualOCR, imagemAtualPDF, c);  
            
            
            String basePath = "C:\\PROGRA~2\\OTIMIZ~1\\";
            
            if(!new File(basePath).exists()){
                basePath = "C:\\PROGRA~1\\OTIMIZ~1\\";
            }

            String[] comando = {basePath + "jre\\bin\\java.exe", "-Xmx512m", "-Xms512m", "-jar", basePath + "conversor.exe", imagemAtualOCR, imagemAtualPDF};

            Process p = null;
            ProcessBuilder pb = new ProcessBuilder(comando);
            pb.directory(new File(basePath));
            p = pb.start();
            BufferedReader reader = null;
            if (p != null) {
                reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
            }

            String line;
            try {
                if (reader != null) {
                    while ((line = reader.readLine()) != null) {
                        System.out.println(line);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            p.waitFor();

            int progress = c.getProgress() + 1;
            c.setProgress(progress);
        } catch (Exception ex) {
            Logger.getLogger(Worker.class.getName()).log(Level.SEVERE, null, ex);
        } finally {

        }
    }
}

public class TelaOCR extends DialogBasico {

    /**
     * Creates new form Carregando
     */
    public TelaOCR() {
        initComponents();
    }

    private static final Tesseract instance = new Tesseract();

    static {
        instance.setLanguage("por");
        instance.setDatapath("tesseract-3.0.4");
        instance.setHocr(true);
        instance.setPageSegMode(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jBCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setModal(true);
        setType(java.awt.Window.Type.POPUP);

        jLabel1.setText("Tornando o PDF Pesquisável, aguarde!!");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/loading.gif"))); // NOI18N

        jBCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button_cancel.png"))); // NOI18N
        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPProgressoOCR, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPProgressoOCR, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jBCancelarActionPerformed

    public String output = "";

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaOCR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaOCR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaOCR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaOCR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaOCR().setVisible(true);
            }
        });
    }

    public void iniciarDialog(final String entrada, Component comp) {
        this.setModal(true);
        this.setLocationRelativeTo(comp);

        final String retorno = "";
        final javax.swing.JDialog tela = this;

        Thread tarefa;
        tarefa = new Thread() {
            @Override
            public void run() {
                try {
                    output = doOCR(entrada, tela);
                    setVisible(false);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao efetuar OCR no arquivo", "Atenção!", JOptionPane.INFORMATION_MESSAGE);
                    ex.printStackTrace();
                    Logger.getLogger(TelaOCR.class.getName()).log(Level.SEVERE, null, ex);
                    tela.dispose();
                }

            }
        };
        tarefa.start();
        this.setVisible(true);

    }

    public String getOutput() {
        return output;
    }

    public static String doOCR(String input, JDialog c) throws Exception {
        String outputFilePDF = "";

        Ghostscript gs = Ghostscript.getInstance();
        String inputFile = input;
        String outputFileImageOCR = Constant.PATH_BASE_FILE + inputFile.substring(inputFile.lastIndexOf("\\") + 1);
        String outputFileImagePDF = Constant.PATH_BASE_FILE + inputFile.substring(inputFile.lastIndexOf("\\") + 1);
        outputFileImageOCR += "OCR%d.png";
        outputFileImagePDF += "PDF%d.png";
        outputFilePDF = inputFile + ".ocr.pdf";

        gs.initialize(gerarParametrosExtracao("3", input, outputFileImageOCR));
        gs.exit();

        gs.initialize(gerarParametrosExtracao("3", input, outputFileImagePDF));
        gs.exit();

        TelaOCR ocr = (TelaOCR) c;
        int count = Utils.getPageCount(inputFile);
        ocr.setValue(count);
        List<String> listaInput = new ArrayList<String>();
        
        long memorySize = ((com.sun.management.OperatingSystemMXBean) ManagementFactory
        .getOperatingSystemMXBean()).getTotalPhysicalMemorySize();

        int availableProcessors = Math.min(Runtime.getRuntime().availableProcessors(), (int)(memorySize/(1024*1024*1024)) * 2);
        
        System.out.println("Trabalhando com " + availableProcessors + " nucleos");

        ExecutorService executorService = Executors.newFixedThreadPool(availableProcessors);

        for (int i = 1; i <= count; i++) {
            String imagemAtualOCR = String.format(outputFileImageOCR, i);
            //BufferedImage read = ImageIO.read(new File(imagemAtualOCR));
            //grayScale(read, imagemAtualOCR);            
            String imagemAtualPDF = String.format(outputFileImagePDF, i);

            Worker worker = new Worker(imagemAtualOCR, imagemAtualPDF, ocr);
            executorService.submit(worker);

            //doHOCRCreation(imagemAtualOCR, imagemAtualPDF, c);
            //  ocr.setProgress(i);
            listaInput.add(String.format(outputFileImagePDF + ".pdf", i));
            System.out.println(i);
            System.gc();
        }
        executorService.shutdown();
        executorService.awaitTermination(60, TimeUnit.MINUTES);
        executorService.shutdownNow();

        Utils.juntarArquivos(listaInput, outputFilePDF);

        System.gc();

        return outputFilePDF;
    }

    
    public static String[] gerarParametrosExtracao(String resolucao, String inputFile, String outputFile) {
        List<String> listaParametros = new ArrayList<String>();
        listaParametros.add(Constant.D_BATCH);
        listaParametros.add(Constant.D_NO_PAUSE);
        listaParametros.add("-sDEVICE=png256");
        listaParametros.add("-dDownScaleFactor=" + resolucao);
        listaParametros.add("-r300");
        listaParametros.add(Constant.D_QUIET);
        listaParametros.add(String.format(Constant.S_OUTPUT_FILE, outputFile));
        listaParametros.add(inputFile);

        //execute and exit interpreter
        String[] str = listaParametros.toArray(new String[listaParametros.size()]);
        return str;
    }

    public static void doHOCRCreation(String imagemAtualOCR, String imagemAtualPDF, JDialog c) throws Exception {
        long inicio = System.currentTimeMillis();
        String result = "";
        File imageFile = new File(imagemAtualOCR);

        try {
            result = instance.doOCR(imageFile);
            System.out.println(result);
        } catch (Error e) {
            if (c != null) {
                c.dispose();
            }
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        System.out.println(System.currentTimeMillis() - inicio + " ms");
        hocr2pdf(result, new File(imagemAtualPDF), new FileOutputStream(imagemAtualPDF + ".pdf"));

    }

    public static void hocr2pdf(String hocrFile, File inputFile, OutputStream outputFile) {
        try {
            // The resolution of a PDF file (using iText) is 72pt per inch
            float pointsPerInch = 72.0f;

            // Using the jericho library to parse the HTML file
            Source source = new Source(hocrFile);

            // Load the image
            Image image = Image.getInstance(inputFile.getAbsolutePath());
            float dotsPerPointX;
            float dotsPerPointY;
            if (image.getDpiX() > 0) {
                dotsPerPointX = image.getDpiX() / pointsPerInch;
                dotsPerPointY = image.getDpiY() / pointsPerInch;
            } else {
                dotsPerPointX = 1.0f;
                dotsPerPointY = 1.0f;
            }

            float pageImagePixelHeight = image.getHeight();
            com.itextpdf.text.Document pdfDocument = new com.itextpdf.text.Document(new Rectangle(image.getWidth() / dotsPerPointX, image.getHeight() / dotsPerPointY));
            PdfWriter pdfWriter = PdfWriter.getInstance(pdfDocument, outputFile);
            pdfDocument.open();
            // first define a standard font for our text
            Font defaultFont = FontFactory.getFont(FontFactory.TIMES, 8, Font.NORMAL, CMYKColor.BLACK);

            // Put the text behind the picture (reverse for debugging)
            PdfContentByte cb = pdfWriter.getDirectContentUnder();
            //PdfContentByte cb = pdfWriter.getDirectContent();

            image.scaleToFit(image.getWidth() / dotsPerPointX, image.getHeight() / dotsPerPointY);
            image.setAbsolutePosition(0, 0);
            // Put the image in front of the text (reverse for debugging)
            pdfWriter.getDirectContent().addImage(image);

            // In order to place text behind the recognised text snippets we are interested in the bbox property		
            Pattern bboxPattern = Pattern.compile("bbox(\\s+\\d+){4}");
            // This pattern separates the coordinates of the bbox property
            Pattern bboxCoordinatePattern = Pattern.compile("(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)");
            // Only tags of the ocr_line class are interesting
            StartTag ocrLineTag = source.getNextStartTag(0, "class", "ocr_line", false);
            while (ocrLineTag != null) {
                net.htmlparser.jericho.Element lineElement = ocrLineTag.getElement();
                Matcher bboxMatcher = bboxPattern.matcher(lineElement.getAttributeValue("title"));
                if (bboxMatcher.find()) {
                    // We found a tag of the ocr_line class containing a bbox property
                    Matcher bboxCoordinateMatcher = bboxCoordinatePattern.matcher(bboxMatcher.group());
                    bboxCoordinateMatcher.find();
                    Integer[] coordinates = new Integer[]{Integer.parseInt((bboxCoordinateMatcher.group(1))),
                        Integer.parseInt((bboxCoordinateMatcher.group(2))),
                        Integer.parseInt((bboxCoordinateMatcher.group(3))),
                        Integer.parseInt((bboxCoordinateMatcher.group(4)))};

                    String line = lineElement.getContent().getTextExtractor().toString();
                    if (line.equals("")) {
                        ocrLineTag = source.getNextStartTag(ocrLineTag.getEnd(), "class", "ocr_line", false);
                        continue;
                    }
                    float bboxWidthPt = (coordinates[2] - coordinates[0]) / dotsPerPointX;
                    float bboxHeightPt = (coordinates[3] - coordinates[1]) / dotsPerPointY;

                    // Put the text into the PDF
                    cb.beginText();
                    // Comment the next line to debug the PDF output (visible Text)
                    cb.setTextRenderingMode(PdfContentByte.TEXT_RENDER_MODE_INVISIBLE);
                    // Scale the text width to fit the OCR bbox
                    boolean textScaled = false;
                    int attempts = 0;
                    float ratioAdjust = 0.01f;

                    do {
                        float lineWidth = defaultFont.getBaseFont().getWidthPoint(line, bboxHeightPt);
                        if (lineWidth >= bboxWidthPt) {
                            textScaled = true;
                        } else {
                            bboxHeightPt += ratioAdjust;
                        }
                        attempts++;
                        if (attempts % 20 == 0) {
                            ratioAdjust += ratioAdjust;
                        }
                    } while (textScaled == false);
                    textScaled = false;
                    attempts = 0;
                    do {
                        float lineWidth = defaultFont.getBaseFont().getWidthPoint(line, bboxHeightPt);
                        if (lineWidth <= bboxWidthPt) {
                            textScaled = true;
                        } else {
                            bboxHeightPt -= ratioAdjust;
                        }
                        attempts++;
                        if (attempts % 20 == 0) {
                            ratioAdjust += ratioAdjust;
                        }
                    } while (textScaled == false);

                    //put text in the document
                    cb.setFontAndSize(defaultFont.getBaseFont(), bboxHeightPt);
                    cb.moveText((float) (coordinates[0] / dotsPerPointX), (float) ((pageImagePixelHeight - coordinates[3]) / dotsPerPointY));

                    cb.showText(line);
                    cb.endText();
                }
                ocrLineTag = source.getNextStartTag(ocrLineTag.getEnd(), "class", "ocr_line", false);
            }
            pdfDocument.close();
            pdfWriter.close();
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCancelar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private final javax.swing.JProgressBar jPProgressoOCR = new javax.swing.JProgressBar();
    // End of variables declaration//GEN-END:variables

    private void setValue(int i) {
        jPProgressoOCR.setMinimum(0);
        jPProgressoOCR.setMaximum(i);
    }

    protected void setProgress(int i) {
        jPProgressoOCR.setValue(i);
    }

    protected int getProgress() {
        return jPProgressoOCR.getValue();
    }
}
