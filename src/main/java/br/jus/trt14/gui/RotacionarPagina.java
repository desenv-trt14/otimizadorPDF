/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.jus.trt14.gui;

import br.jus.trt14.events.DragableTextField;
import br.jus.trt14.tools.Archive;
import br.jus.trt14.tools.Utils;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import java.awt.FileDialog;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.security.Security;
import java.util.HashMap;
import java.util.concurrent.Callable;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import sun.security.mscapi.SunMSCAPI;

/**
 *
 * @author dfs15
 */
public class RotacionarPagina extends FrameBasico {

    private int pageCount;
    private int currentPage;
    private String extractImagePage;
    private HashMap<Integer, Integer> rotacao = new HashMap<Integer, Integer>();
    private String currentFile;

    /**
     * Creates new form RotacionarPagina
     */
    public RotacionarPagina() {
        initComponents();
        this.position();
        final JTextField field = jTFEntradaPath;
        final RotacionarPagina r = this;
        DragableTextField dragableTextField = new DragableTextField(field, true, new Callable<Void>() {
            @Override
            public Void call() throws Exception {
                r.setFile(field.getText());
                return null;
            }
        });

        jTFEntradaPath.setDropTarget(dragableTextField);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLSuperior = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLSuperior1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jBAbrirDocumentoPDFEntrada = new javax.swing.JButton();
        jBSalvar = new javax.swing.JButton();
        jBAntiHorario = new javax.swing.JButton();
        jBHorario = new javax.swing.JButton();
        jBAnterior = new javax.swing.JButton();
        jTPaginaAtual = new javax.swing.JTextField();
        jBProxima = new javax.swing.JButton();
        jLQuantidadePaginas = new javax.swing.JLabel();
        jLEInforme = new javax.swing.JLabel();
        jTFEntradaPath = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("JT- Rotacionar Páginas");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLSuperior.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLSuperior.setAlignmentX(0.5F);
        jLSuperior.setBorder(javax.swing.BorderFactory.createTitledBorder("PDF"));
        getContentPane().add(jLSuperior, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 248, 665, 410));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Otimizador");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 66, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("PDF");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 66, -1, -1));

        jLSuperior1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trt14_logo_small.png"))); // NOI18N
        jLSuperior1.setAlignmentX(0.5F);
        getContentPane().add(jLSuperior1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 98, 84));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Arquivo"));

        jBAbrirDocumentoPDFEntrada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gnome_folder_open_16.png"))); // NOI18N
        jBAbrirDocumentoPDFEntrada.setText("Abrir");
        jBAbrirDocumentoPDFEntrada.setMaximumSize(new java.awt.Dimension(100, 25));
        jBAbrirDocumentoPDFEntrada.setMinimumSize(new java.awt.Dimension(100, 25));
        jBAbrirDocumentoPDFEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAbrirDocumentoPDFEntradaActionPerformed(evt);
            }
        });

        jBSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gnome_folder_open_16.png"))); // NOI18N
        jBSalvar.setText("Salvar");
        jBSalvar.setMaximumSize(new java.awt.Dimension(100, 25));
        jBSalvar.setMinimumSize(new java.awt.Dimension(100, 25));
        jBSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalvarActionPerformed(evt);
            }
        });

        jBAntiHorario.getFont().deriveFont(14f);
        jBAntiHorario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/anti-clockwise.png"))); // NOI18N
        jBAntiHorario.setToolTipText("Girar sentido anti-horário");
        jBAntiHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAntiHorarioActionPerformed(evt);
            }
        });

        jBHorario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clockwise.png"))); // NOI18N
        jBHorario.setToolTipText("Girar sentido horário");
        jBHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBHorarioActionPerformed(evt);
            }
        });

        jBAnterior.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBAnterior.setText("<");
        jBAnterior.setToolTipText("Pág. anterior");
        jBAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAnteriorActionPerformed(evt);
            }
        });

        jTPaginaAtual.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTPaginaAtual.setText("1");
        jTPaginaAtual.setToolTipText("Número da página");
        jTPaginaAtual.setPreferredSize(new java.awt.Dimension(13, 18));
        jTPaginaAtual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTPaginaAtualActionPerformed(evt);
            }
        });

        jBProxima.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBProxima.setText(">");
        jBProxima.setToolTipText("Próxima pág.");
        jBProxima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProximaActionPerformed(evt);
            }
        });

        jLQuantidadePaginas.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLQuantidadePaginas.setText("        ");

        jLEInforme.setText("Informe o arquivo que você deseja converter.");

        jTFEntradaPath.setEditable(false);
        jTFEntradaPath.setToolTipText("Você pode arrastar e soltar um PDF aqui");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLEInforme)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 143, Short.MAX_VALUE)
                                .addComponent(jBAnterior)
                                .addGap(7, 7, 7)
                                .addComponent(jTPaginaAtual, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLQuantidadePaginas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBProxima)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBAntiHorario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBHorario))
                            .addComponent(jTFEntradaPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBAbrirDocumentoPDFEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLEInforme)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFEntradaPath, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBAbrirDocumentoPDFEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jBHorario)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBAntiHorario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTPaginaAtual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBProxima, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLQuantidadePaginas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(17, 17, 17))))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 116, 665, 130));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBAbrirDocumentoPDFEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAbrirDocumentoPDFEntradaActionPerformed
        addFile();
    }//GEN-LAST:event_jBAbrirDocumentoPDFEntradaActionPerformed

    private void jBAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAnteriorActionPerformed
        if (currentPage > 1) {
            currentPage--;
            showCurrentPage();
        }
    }//GEN-LAST:event_jBAnteriorActionPerformed

    private void jBProximaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProximaActionPerformed
        if (currentPage < pageCount) {
            currentPage++;
            showCurrentPage();
        }
    }//GEN-LAST:event_jBProximaActionPerformed

    private void jBAntiHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAntiHorarioActionPerformed
        boolean confirmaAcao = Utils.confirmaAcao("Deseja aplicar essa operação a todas as páginas?", "Atenção");
        if (confirmaAcao) {
            for (int i = 1; i <= pageCount; i++) {
                rotacao.put(i, rotacao.get(i) - 90);
            }
        } else {
            rotacao.put(currentPage, rotacao.get(currentPage) - 90);
        }
        showCurrentPage();
    }//GEN-LAST:event_jBAntiHorarioActionPerformed

    private void jBHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBHorarioActionPerformed
        boolean confirmaAcao = Utils.confirmaAcao("Deseja aplicar essa operação a todas as páginas?", "Atenção");

        if (confirmaAcao) {
            for (int i = 1; i <= pageCount; i++) {
                rotacao.put(i, rotacao.get(i) + 90);
            }
        } else {
            rotacao.put(currentPage, rotacao.get(currentPage) + 90);
        }
        showCurrentPage();
    }//GEN-LAST:event_jBHorarioActionPerformed

    private void jBSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalvarActionPerformed
        try {
            PdfReader reader = new PdfReader(currentFile);
            int n = reader.getNumberOfPages();
            PdfDictionary page;
            PdfNumber rotate;
            for (int p = 1; p <= n; p++) {
                page = reader.getPageN(p);
                rotate = page.getAsNumber(PdfName.ROTATE);
                if (rotate == null) {
                    page.put(PdfName.ROTATE, new PdfNumber(rotacao.get(p)));
                } else {
                    page.put(PdfName.ROTATE, new PdfNumber((rotate.intValue() + rotacao.get(p)) % 360));
                }
            }

            JFileChooser fc = new JFileChooser();
            FileFilter ff = new FileNameExtensionFilter("PDF (Portable Document Format)", "pdf");
            fc.setFileFilter(ff);
            fc.setAcceptAllFileFilterUsed(false);
            int opt = fc.showSaveDialog(this);
            File f = fc.getSelectedFile();
            if (opt == 0) {
                String fileRotate = f.getAbsolutePath() + ".pdf";
                String randomFileName = Utils.getRandomFileName();
                PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(randomFileName));
                stamper.close();
                Archive.copy(new File(randomFileName), new File(fileRotate));
                JOptionPane.showMessageDialog(null, "Arquivo salvo.");
            }

            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jBSalvarActionPerformed

    private void jTPaginaAtualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTPaginaAtualActionPerformed
        Integer pagina = Integer.valueOf(jTPaginaAtual.getText());
        if (pagina > 0) {
            currentPage = pagina;
            showCurrentPage();
        }
    }//GEN-LAST:event_jTPaginaAtualActionPerformed

    protected void addFile() {
        Utils.cleanTempFolder();
        
        FileDialog dialog = new FileDialog(this, "Abrir");
        
        dialog.setFile(".pdf");
        dialog.setVisible(true);

        File[] files = dialog.getFiles();

        if (files.length > 0) {
            try {
                setFile(files[0].getAbsolutePath());
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }

    public void setFile(String file) {
        pageCount = Utils.getPageCount(file);
        currentFile = file;
        jLQuantidadePaginas.setText(String.format("de %s", pageCount));

        for (int i = 1; i <= pageCount; i++) {
            rotacao.put(i, 0);
        }
        currentPage = 1;
        showCurrentPage();
    }

    protected BufferedImage rotate90(BufferedImage originalImage, int rotation) {
        AffineTransform tx = new AffineTransform();
// last, width = height and height = width :)
        tx.translate(originalImage.getHeight() / 2, originalImage.getWidth() / 2);
        tx.rotate(Math.toRadians(rotation));
// first - center image at the origin so rotate works OK
        tx.translate(-originalImage.getWidth() / 2, -originalImage.getHeight() / 2);

        AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

// new destination image where height = width and width = height.
        BufferedImage newImage = new BufferedImage(originalImage.getHeight(), originalImage.getWidth(), originalImage.getType());
        op.filter(originalImage, newImage);
        return newImage;
    }

    protected BufferedImage rotate180(BufferedImage image, int rotation) {
        double rotationRequired = Math.toRadians(rotation);
        double locationX = image.getWidth() / 2;
        double locationY = image.getHeight() / 2;
        Graphics2D g = image.createGraphics();

        BufferedImage temp = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);

        AffineTransform tx = AffineTransform.getRotateInstance(rotationRequired, locationX, locationY);
        AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);

        g.drawImage(op.filter(image, temp), 0, 0, null);

        return temp;
    }

    private void showCurrentPage() {
        try {
            extractImagePage = Utils.extractImagePage(currentFile, currentPage);
            jTPaginaAtual.setText(String.valueOf(currentPage));
            String curPage = String.format(extractImagePage, currentPage);

            BufferedImage read = ImageIO.read(new File(curPage));

            float widthFactor = 0;

            if ((rotacao.get(currentPage) / 90) % 2 == 0) {
                if (read.getHeight() > read.getWidth()) {
                    widthFactor = (float) jLSuperior.getHeight() / read.getHeight();
                } else {
                    widthFactor = (float) jLSuperior.getWidth() / read.getWidth();
                }
            } else {
                if (read.getHeight() > read.getWidth()) {
                    widthFactor = (float) jLSuperior.getWidth() / read.getHeight();
                } else {
                    widthFactor = (float) jLSuperior.getHeight() / read.getWidth();
                }
            }
            if ((rotacao.get(currentPage) / 90) % 2 == 1) {
                widthFactor *= .95f;
            } else {
                widthFactor *= .80f;
            }

            float heightFactor = widthFactor;

            BufferedImage resizeImage = Utils.resizeImage(read, widthFactor, heightFactor);

            if ((rotacao.get(currentPage) / 90) % 2 == 1) {
                resizeImage = rotate90(resizeImage, rotacao.get(currentPage));
            } else {
                resizeImage = rotate180(resizeImage, rotacao.get(currentPage));
            }
            jLSuperior.setIcon(new javax.swing.ImageIcon(resizeImage));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            BouncyCastleProvider providerBC = new BouncyCastleProvider();
            Security.addProvider(providerBC);
            SunMSCAPI providerMSCAPI = new SunMSCAPI();
            Security.addProvider(providerMSCAPI);
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RotacionarPagina().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAbrirDocumentoPDFEntrada;
    private javax.swing.JButton jBAnterior;
    private javax.swing.JButton jBAntiHorario;
    private javax.swing.JButton jBHorario;
    private javax.swing.JButton jBProxima;
    private javax.swing.JButton jBSalvar;
    private javax.swing.JLabel jLEInforme;
    private javax.swing.JLabel jLQuantidadePaginas;
    private javax.swing.JLabel jLSuperior;
    private javax.swing.JLabel jLSuperior1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTFEntradaPath;
    private javax.swing.JTextField jTPaginaAtual;
    // End of variables declaration//GEN-END:variables
}
